package com.shopme.admin.user;
import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.annotation.Rollback;

import com.shopme.common.entity.User;
import com.shopme.common.entity.Role;
@DataJpaTest
@AutoConfigureTestDatabase(replace = Replace.NONE)
@Rollback(false)
public class UserRepositoryTest {
	@Autowired
	private UserRepository repo;
	@Autowired
	private TestEntityManager entityManager;
	@Test
	public void testCreateNewUserWithOneRole() {
		Role roleAdmin = entityManager.find(Role.class, 1);
		User userQuanDH = new User("quandhdvl@gmail.com","quan2001","Quan","Do Hong");
		userQuanDH.addRole(roleAdmin);
		User savedUser = repo.save(userQuanDH);
		assertThat(savedUser.getId()).isGreaterThan(0);
	}
	@Test
	public void testCreateNewUserWithTwoRole() {
		User userHieuNH = new User("hieunt@gmail.com","hieu2001","Hieu","Nguyen Huu");
		Role roleEditor = new Role(3);
		Role roleAssistant = new Role(5);
		userHieuNH.addRole(roleEditor);
		userHieuNH.addRole(roleAssistant);
		User savedUser = repo.save(userHieuNH);
		assertThat(savedUser.getId()).isGreaterThan(0);
	}
	@Test 
	public void testListAllUsers() {
		Iterable<User> listUsers = repo.findAll();
		listUsers.forEach(user -> System.out.print(user));
		
	}
	@Test
	public void testGetUserById() {
		User userQuan = repo.findById(9).get();
	System.out.print(userQuan);
	assertThat(userQuan).isNotNull();
	}
	@Test
	public void testUpdateUserDetails() {
		User userQuan = repo.findById(9).get();
		userQuan.setEnabled(true);
		userQuan.setEmail("quandhhe151315@fpt.edu.vn");
		repo.save(userQuan);
	}
	@Test
	public void testUpdateUserRoles() {
		User userRavi = repo.findById(10).get();
		Role roleEditor = new Role(3);
		Role roleSalesperson = new Role(2);
		userRavi.getRoles().remove(roleEditor);
		userRavi.addRole(roleSalesperson);
		repo.save(userRavi);
	}
	@Test
	public void testDeleteUser() {
		Integer userId = 10;
		repo.deleteById(userId);;
	}
	@Test
	public void testGetUserByEmail() {
		String email = "a@gmail.com";
		User user = repo.getUserByEmail(email);
		assertThat(user).isNotNull();
	}
}
